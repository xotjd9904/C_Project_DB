#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#define MAX_SIZE 100

typedef struct {
	int val[MAX_SIZE];
	int top;
}stack;

void init_stack(stack* s) {
	s->top = -1;
}

bool is_empty(stack s) {
	return (s.top == -1);
}

bool is_full(stack s) {
	return (s.top == MAX_SIZE - 1);
}

int pop(stack* s) {
	if (!is_empty(*s)) {
		return s->val[s->top--];
	}
	else {
		printf("error");
		exit(1);
	}
}

void push(stack* s, int a) {
	if (!is_full(*s)) {
		s->val[++s->top] = a;
	}
	else {
		printf("error");
		exit(1);
	}
}

int peek(stack s) {
	if (!is_empty(s)) {
		return s.val[s.top];
	}
	else {
		printf("error");
		exit(1);
	}
}

typedef struct {
	int row;
	int col;
	int val;
}element;

typedef struct {
	element data[MAX_SIZE];
	int Rows;
	int Cols;
	int nums;
}sparse;

typedef struct {
	int vector[MAX_SIZE];
	int nums;
}vector;

vector matrix_vector_multi(sparse s, vector v) {
	vector c;
	c.nums = s.Rows;
	int ip = 0;
	for (int i = 0; i < s.Rows; i++) {
		c.vector[i] = 0;
	}
	for (int i = 0; i < s.Rows; i++) {
		for (int j = 0; j < s.nums; j++) {
			if (s.data[j].row == i) {
				c.vector[i] += s.data[j].val* v.vector[s.data[j].col];	
			}
		}
			
		
	}
	return c;
}



int main() {
	sparse p = { {{0,3,7},{1, 0,9},{1, 4, 8},{2,1,1},{3,2,3},{3,4,5}},4, 6, 6 };
	vector v = { {1, 2, 3, 4, 5, 6}, 6 };
	vector c = matrix_vector_multi(p, v);
	for (int i = 0; i < c.nums; i++) {
		printf("%d ", c.vector[i]);
	}
}
