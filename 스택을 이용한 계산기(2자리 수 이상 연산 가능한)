#define _CRT_SECURE_NO_WARNINGS
#include <stdbool.h>
#include <stdio.h>
#define MAX_SIZE 100

typedef struct {
	long double data[MAX_SIZE];
	int top;
}stack;

void init_stack(stack* s) {
	s->top = -1;
}

bool is_empty(stack s) {
	return s.top == -1;
}

bool is_full(stack s) {
	return s.top == MAX_SIZE - 1;
}

void push(stack* s, long double val) {
	if (!is_full(*s)) s->data[++s->top] = val;
	else {
		printf("ERROR");
		exit(1);
	}
}

long double pop(stack* s) {
	if (!is_empty(*s)) return s->data[s->top--];
	else {
		printf("ERROR");
		exit(1);
	}
}

long double peek(stack s) {
	if (!is_empty(s)) return s.data[s.top];
	else {
		printf("ERROR");
		exit(1);
	}
}

long double compute(char op, long double opnd1, long double opnd2) {
	long double sum = 1;
	switch (op) {
	case '+':
		return opnd1 + opnd2;
	case '-':
		return opnd2 - opnd1;
	case '*':
		return opnd1 * opnd2;
	case '/':
		return opnd2 / opnd1;
	case '^':
		for (int i = 0; i < opnd1; i++) sum *= opnd2;
		return sum;
	default:
		printf("error");
		exit(1);
	}
}

int PIS(stack s) {
	switch ((char)peek(s)) {
	case('+'):
	case('-'):
		return 1;
	case('*'):
	case('/'):
		return 2;
	case('^'):
		return 3;
	case('('):
	case('{'):
	case('['):
		return 0;
	}
}

int PIE(char ch) {
	switch (ch) {
	case('+'):
	case('-'):
		return 1;
	case('*'):
	case('/'):
		return 2;
	case('^'):
		return 3;
	case('('):
	case('{'):
	case('['):
		return 4;
	}
}

char get_token(char p[], int i) {
	if ((int)p[i] >= (int)'0' && (int)p[i] <= (int)'9') return 0;
	else return 1;
}

//중위식을 후위식으로 변환하는 함수
void postfix(char iexp[], char pexp[]) {
	stack s;
	init_stack(&s);
	int ip = 0;
	int ie = 0;
	char ch, op;

	while ((ch = iexp[ie]) != NULL) {
		//해당 인덱스 값이 공백이면
		if (ch == ' ') {
			pexp[ip++] = ' '; //연산자를 배열에 넣기전 피연산자의 자릿수를 구분하기 위해 공백 추가
			ie++;
			continue; //중위식의 공백은 오타로 처리
		}
		//만약 피연산자라면
		if (get_token(iexp, ie) == 0) pexp[ip++] = ch;
		//만약 연산자라면
		else {
			pexp[ip++] = ' '; //연산자를 배열에 넣기전 피연산자의 자리수를 구분하기 위해 공백 추가
			//만약 연산자가 닫힌 괄호면
			if (ch == ')' || ch == '}' || ch == ']') {
				if (is_empty(s)) {
					printf("error");
					exit(1);
				}
				switch (ch) {
				case (')'):
					// '('가 나올 때까지 스택의 연산자를 배열에 추가
					while (!is_empty(s) && (op = pop(&s)) != '(') {
						pexp[ip++] = op;
					}
					if (op != '(') {
						printf("error");
						exit(1);
					}
					break;
				case ('}'):
					// '{'가 나올때 까지 스택의 연산자를 배열에 추가
					while (!is_empty(s) && (op = pop(&s)) != '{') {
						pexp[ip++] = op;
					}
					if (op != '{') {
						printf("error");
						exit(1);
					}
					break;
				case (']'):
					// '['가 나올때 까지 스택의 연산자를 배열에 추가
					while (!is_empty(s) && (op = pop(&s)) != '[') {
						pexp[ip++] = op;
					}
					if (op != '[') {
						printf("error");
						exit(1);
					}
					break;
				default:
					break;
				}
			}
			//만약 연산자가 닫힌괄호가 아닌 다른 연산자라면
			else {
				while (!is_empty(s) && PIS(s) >= PIE(ch)) {
					pexp[ip++] = pop(&s);
				}
				push(&s, ch);
			}
		}
		ie++;
	}
	while (!is_empty(s)) {
		pexp[ip++] = ' '; //연산자를 배열에 넣기전 피연산자의 자릿수를 구분하기 위해 공백 추가
		pexp[ip++] = pop(&s);
	}
	pexp[ip] = '\0';
}

//후위식을 평가하는 함수
long double eval(char pexp[]) {
	stack r;
	init_stack(&r);
	int ip = 0;
	int ch;
	long double opnd1, opnd2;
	long double sum = 0;

	while ((ch = pexp[ip]) != NULL) {
		//공백이면 자리수를 구분하기 위한 공백이기 때문에 continue
		if (ch == ' ') {
			sum = 0; //다음 피연산자의 자리수를 계산하기 위해 sum값을 초기화
			ip++;
			continue;
		}
		//피연산자라면
		if (get_token(pexp, ip) == 0) {
			//다음 인덱스에 해당되는 값 또한 피연산자라면 2자릿수 이상이므로 sum을 연산
			if (get_token(pexp, ip) == get_token(pexp, ip + 1))
				sum = sum * 10 + (ch - '0');
			//다음 인덱스에 해당되는 값이 피연산자가 아니라면
			else {
				sum = sum * 10 + (ch - '0');
				push(&r, sum);
			}
			
		}
		//연산자라면
		else {
			sum = 0;//다음 피연산자의 자릿수를 계산하기 위해 sum값을 초기화
			opnd1 = pop(&r);
			opnd2 = pop(&r);
			push(&r, compute(ch, opnd1, opnd2));
		}
		ip++;
	}
	if (!is_empty(r)) return pop(&r);
	else {
		printf("error");
		exit(1);
	}
}

//사용자로부터 중위식을 입력받는 함수
void get_exp(char iexp[]) {
	printf("수식을 입력하세요: ");
	gets_s(iexp, MAX_SIZE);

}

void print(long double eval) {
	printf("%3.2llf", eval);
}

int main() {
	char iexp[MAX_SIZE], pexp[MAX_SIZE];
	int answer = 1;
	do {
		get_exp(&iexp);
		postfix(iexp, pexp);
		print(eval(pexp));

		printf("\n계속 진행하시겠습니까?? (YES: 1, NO: 0): ");
		scanf("%d", &answer);

		while (getchar() != '\n');//입력 버퍼에 존재하는 \n문자를 제거

	} while (answer != 0);
	return 0;
}
